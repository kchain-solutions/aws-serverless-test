AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  A serverless architecture to facilitate the importation of CSV files and provide seamless access to the data through a GraphQL endpoint.

Parameters:
  ProcessorFunctionName:
    Type: String
    Default: "btbvm001-processor-function"
  StorageBucketName:
    Type: String
    Default: "btbvm001-storage-s3"
  ProductTableName:
    Type: String
    Default: "btbvm001-products-table"
  APIName:
    Type: String
    Default: "btbvm001-appsync"

Resources:
  StorageS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref StorageBucketName

  ProductTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ProductTableName
      AttributeDefinitions:
        - AttributeName: sku
          AttributeType: S
      KeySchema:
        - AttributeName: sku
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref ProcessorFunctionName
      CodeUri: ProcessorFunctions/
      Handler: app.processorHandler
      Runtime: nodejs18.x
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          PRODUCT_TABLE: !Ref ProductTableName
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductTableName
        - S3CrudPolicy:
            BucketName: !Ref StorageBucketName
      Events:
        FileUpload:
          Type: S3
          Properties:
            Bucket: !Ref StorageS3Bucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: ".csv"

  # AppSync GraphQL
  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Ref APIName
      AuthenticationType: API_KEY

  AppSyncAPIKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId

  ApiSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Product {
          sku: String!
          name: String!
          price: String!
          quantity: Int
          updated: Long!
        }

        type ProductCollection {
          items: [Product]
          nextToken: String
        }

        type Query {
          getProduct(sku: String!): Product
          getProducts(filter: ProductFilterInput, limit: Int, nextToken: String): ProductCollection
        }

        input ProductFilterInput {
          sku: StringFilterInput
          name: StringFilterInput
          price: StringFilterInput
          quantity: IntFilterInput
          updated: LongFilterInput
        }

        input IntFilterInput {
          ne: Int
          eq: Int
          le: Int
          lt: Int
          ge: Int
          gt: Int
          contains: Int
          notContains: Int
          between: [Int]
        }

        input LongFilterInput {
          ne: Long
          eq: Long
          le: Long
          lt: Long
          ge: Long
          gt: Long
          contains: Long
          notContains: Long
          between: [Long]
        }

        input StringFilterInput {
          ne: String
          eq: String
          le: String
          lt: String
          ge: String
          gt: String
          contains: String
          notContains: String
          between: [String]
          beginsWith: String
        }

  ProductTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: ProductDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBServiceRole.Arn
      DynamoDBConfig:
        AwsRegion: "eu-west-3"
        TableName: !Ref ProductTableName

  GetProductResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt ProductTableDataSource.Name
      FieldName: getProduct
      TypeName: Query
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "operation" : "GetItem",
          "key" : {
            "sku" : $util.dynamodb.toDynamoDBJson($ctx.args.sku)
          }
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"

  GetProductsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DataSourceName: !GetAtt ProductTableDataSource.Name
      FieldName: getProducts
      TypeName: Query
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          "filter": #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,
          "limit": $util.defaultIfNull($ctx.args.limit, 50),
          "nextToken": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"

  AppSyncDynamoDBServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AppSyncDynamoDBServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AppSyncDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt ProductTable.Arn
